package main

import "fmt"

func test() int {
	return 90
}
//演示Golang进制的相互转换
func main()  {

	//其他进制转10进制
	//8进制转10进制
	var i int = 02456
	fmt.Printf("%d \n",i)

	//16进制转10进制
	var j int = 0xA45
	fmt.Printf("%d \n",j)

	//十进制如何转化成其他进制
	//十进制转二进制，不断除以2，直到商为0，然后将每一步的余数倒过来
	//就是对应的二进制
	//其他进制依次类推

	//十进制转2进制
	var i1 int = 56
	fmt.Printf("%b \n",i1)

	//十进制转8进制,8进制以0开头
	var j1 int = 156
	fmt.Printf("%o \n",j1)
	
	//十进制转16进制，16进制以0x开头
	var k1 int = 356
	fmt.Printf("%X \n",k1)

	//2进制转8进制，每三位一组（从低位开始组合），转成对应的8进制即可
	//11010101 转8进制 11 010 101 = 0 3 2 5

	//2进制转16进制，每四位一组（从低位开始组合），转成对应的16进制即可
	//11010101 转16进制 1101 0101 = 0 X D 5

	//8进制转2进制，将8进制每一位，转成对应3位二进制数即可
	// 0237 转2进制 10 011 111

	//16进制转 进制，将16进制每一位，转成对应4位二进制数即可
	// 0x237 转2进制 10 0011 0111

	//位运算
	//计算机内部，都是以二进制运算的

	//源码、反码、补码
	/*
	对于有符号的而言
	1、二进制的最高位是符号位：0表示正数，1表示负数
		1 在计算机中 [0000 0001]，-1 在计算机中 [1000 0001]

	2、正数的源码、反码、补码都一样
		1 的源码 [0000 0001]
		1 的反码 [0000 0001]
		1 的补码 [0000 0001]

	3、负数的反码=它的符号位不变，其它位取反
		-1 的源码 [1000 0001]
		-1 的反码 [1111 1110]

	4、负数的补码=它的反码+1
		-1 的补码 [1111 11111]

	5、0的反码，补码都是0

	6、在计算机运算的时候，都是以补码的方式来运行的
	1 - 1 在计算机中运算 1 + (-1)
	 */

	/*
	Golang中有三个位运算
	分别是 按位与&、按位或|、按位异或^ 它们的运算规则是：
	按位与&：两位全为1，结果为1，否则为0
	按位｜：两位有一个1，结果为1，否则为0
	按位异或^：两位中一个为0，一个为1，结果为1，否则为0
	 */

	/*
	2&3
	2的补码 0000 0010
	3的补码 0000 0011
	2&3    0000 0010 => 2
	 */

}

